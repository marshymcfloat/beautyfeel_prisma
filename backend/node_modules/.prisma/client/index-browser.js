
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PayslipRequestScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  requestTimestamp: 'requestTimestamp',
  periodStartDate: 'periodStartDate',
  periodEndDate: 'periodEndDate',
  status: 'status',
  notes: 'notes',
  processedById: 'processedById',
  processedTimestamp: 'processedTimestamp',
  relatedPayslipId: 'relatedPayslipId'
};

exports.Prisma.PayslipScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  periodStartDate: 'periodStartDate',
  periodEndDate: 'periodEndDate',
  baseSalary: 'baseSalary',
  totalCommissions: 'totalCommissions',
  totalDeductions: 'totalDeductions',
  totalBonuses: 'totalBonuses',
  netPay: 'netPay',
  status: 'status',
  releasedDate: 'releasedDate',
  generatedAt: 'generatedAt'
};

exports.Prisma.RecommendedAppointmentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  recommendedDate: 'recommendedDate',
  originatingTransactionId: 'originatingTransactionId',
  originatingAvailedServiceId: 'originatingAvailedServiceId',
  originatingServiceId: 'originatingServiceId',
  status: 'status',
  attendedTransactionId: 'attendedTransactionId',
  suppressNextFollowUpGeneration: 'suppressNextFollowUpGeneration',
  reminder3DaySentAt: 'reminder3DaySentAt',
  reminder2DaySentAt: 'reminder2DaySentAt',
  reminder1DaySentAt: 'reminder1DaySentAt',
  reminderTodaySentAt: 'reminderTodaySentAt',
  reminder1DayAfterSentAt: 'reminder1DayAfterSentAt',
  reminder7DaySentAt: 'reminder7DaySentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountRuleScalarFieldEnum = {
  id: 'id',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  applyToAll: 'applyToAll',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  title: 'title',
  code: 'code',
  totalSales: 'totalSales'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  accountId: 'accountId',
  isPresent: 'isPresent',
  notes: 'notes',
  checkedById: 'checkedById',
  checkedAt: 'checkedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  name: 'name',
  email: 'email',
  role: 'role',
  salary: 'salary',
  dailyRate: 'dailyRate',
  branchId: 'branchId',
  canRequestPayslip: 'canRequestPayslip'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  branchId: 'branchId',
  totalSales: 'totalSales',
  recommendFollowUp: 'recommendFollowUp',
  recommendedFollowUpDays: 'recommendedFollowUpDays',
  followUpPolicy: 'followUpPolicy'
};

exports.Prisma.ServiceSetScalarFieldEnum = {
  id: 'id',
  title: 'title',
  price: 'price'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  totalPaid: 'totalPaid',
  nextAppointment: 'nextAppointment'
};

exports.Prisma.VoucherScalarFieldEnum = {
  id: 'id',
  code: 'code',
  value: 'value',
  usedAt: 'usedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  bookedFor: 'bookedFor',
  customerId: 'customerId',
  voucherId: 'voucherId',
  discount: 'discount',
  paymentMethod: 'paymentMethod',
  grandTotal: 'grandTotal',
  status: 'status',
  branchId: 'branchId',
  bookingReminderSentAt: 'bookingReminderSentAt'
};

exports.Prisma.AvailedServiceScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  serviceId: 'serviceId',
  quantity: 'quantity',
  price: 'price',
  commissionValue: 'commissionValue',
  originatingSetId: 'originatingSetId',
  originatingSetTitle: 'originatingSetTitle',
  checkedById: 'checkedById',
  servedById: 'servedById',
  serviceSetId: 'serviceSetId',
  status: 'status',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GiftCertificateScalarFieldEnum = {
  id: 'id',
  code: 'code',
  issuedAt: 'issuedAt',
  expiresAt: 'expiresAt',
  purchaserCustomerId: 'purchaserCustomerId',
  recipientName: 'recipientName',
  recipientEmail: 'recipientEmail',
  usedAt: 'usedAt'
};

exports.Prisma.ManualSaleScalarFieldEnum = {
  id: 'id',
  date: 'date',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  recordedById: 'recordedById',
  branchId: 'branchId'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  date: 'date',
  amount: 'amount',
  category: 'category',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  recordedById: 'recordedById',
  branchId: 'branchId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PayslipRequestStatus = exports.$Enums.PayslipRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PROCESSED: 'PROCESSED',
  FAILED: 'FAILED'
};

exports.PayslipStatus = exports.$Enums.PayslipStatus = {
  PENDING: 'PENDING',
  RELEASED: 'RELEASED'
};

exports.RecommendedAppointmentStatus = exports.$Enums.RecommendedAppointmentStatus = {
  RECOMMENDED: 'RECOMMENDED',
  SCHEDULED: 'SCHEDULED',
  ATTENDED: 'ATTENDED',
  CANCELLED: 'CANCELLED',
  MISSED: 'MISSED'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT'
};

exports.Role = exports.$Enums.Role = {
  OWNER: 'OWNER',
  CASHIER: 'CASHIER',
  WORKER: 'WORKER',
  ATTENDANCE_CHECKER: 'ATTENDANCE_CHECKER'
};

exports.FollowUpPolicy = exports.$Enums.FollowUpPolicy = {
  NONE: 'NONE',
  ONCE: 'ONCE',
  EVERY_TIME: 'EVERY_TIME'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  ewallet: 'ewallet',
  cash: 'cash',
  bank: 'bank'
};

exports.Status = exports.$Enums.Status = {
  PENDING: 'PENDING',
  DONE: 'DONE',
  CANCELLED: 'CANCELLED'
};

exports.ExpenseCategory = exports.$Enums.ExpenseCategory = {
  RENT: 'RENT',
  UTILITIES: 'UTILITIES',
  SALARIES: 'SALARIES',
  SUPPLIES: 'SUPPLIES',
  MARKETING: 'MARKETING',
  MAINTENANCE: 'MAINTENANCE',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  PayslipRequest: 'PayslipRequest',
  Payslip: 'Payslip',
  RecommendedAppointment: 'RecommendedAppointment',
  DiscountRule: 'DiscountRule',
  Branch: 'Branch',
  Attendance: 'Attendance',
  Account: 'Account',
  Service: 'Service',
  ServiceSet: 'ServiceSet',
  Customer: 'Customer',
  Voucher: 'Voucher',
  Transaction: 'Transaction',
  AvailedService: 'AvailedService',
  GiftCertificate: 'GiftCertificate',
  ManualSale: 'ManualSale',
  Expense: 'Expense'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
