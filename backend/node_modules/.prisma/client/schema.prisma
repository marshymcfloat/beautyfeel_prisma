// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.1.x"]
  output          = "../backend/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AvailedItemType {
  SERVICE
  SET
}

enum Role {
  OWNER
  CASHIER
  WORKER
  ATTENDANCE_CHECKER
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum Status {
  PENDING
  DONE
  CANCELLED
}

enum PaymentMethod {
  ewallet
  cash
  bank
  // Consider adding 'unknown' here if it's a valid method,
  // otherwise handle null or a separate flag
}

enum PayslipStatus {
  PENDING
  RELEASED
}

enum FollowUpPolicy {
  NONE // Never recommend follow-up for this service
  ONCE // Recommend only the first time a customer completes this service
  EVERY_TIME // Recommend every time a customer completes this service
}

enum PayslipRequestStatus {
  PENDING // Initial state after request
  APPROVED // Admin approved, ready for generation/processing
  REJECTED // Admin rejected
  PROCESSED // Payslip generated and likely released (final state)
  FAILED // Processing failed (optional)
}

enum RecommendedAppointmentStatus {
  RECOMMENDED // Initially recommended, no action taken
  SCHEDULED // Customer booked an appointment (maybe link date/time later)
  ATTENDED // Customer attended a transaction linked to this recommendation
  CANCELLED // The recommended appointment was cancelled/decline
  MISSED // The recommended date passed without being scheduled/missed
}

// --- NEW ENUM for Expense Categories ---
enum ExpenseCategory {
  RENT
  UTILITIES
  SALARIES
  SUPPLIES
  MARKETING
  MAINTENANCE
  OTHER
  // Add other categories as needed
}

// --- END NEW ENUM ---

// --- Models ---

model PayslipRequest {
  id               String               @id @default(cuid())
  accountId        String // ID of the employee requesting
  account          Account              @relation("AccountRequests", fields: [accountId], references: [id], onDelete: Cascade) // Relation to requester
  requestTimestamp DateTime             @default(now())
  periodStartDate  DateTime             @db.Date
  periodEndDate    DateTime             @db.Date
  status           PayslipRequestStatus @default(PENDING) // Use the new enum
  notes            String? // Optional notes from employee or admin (e.g., rejection reason)

  // Optional: Track who processed the request
  processedById      String? // ID of the admin who processed it
  processedBy        Account?  @relation("AdminManagedRequests", fields: [processedById], references: [id]) // Relation to admin
  processedTimestamp DateTime?

  // Optional: Link to the payslip created after approval
  relatedPayslipId String?  @unique // Ensure one request links to max one payslip
  relatedPayslip   Payslip? @relation(fields: [relatedPayslipId], references: [id])

  @@index([accountId, status])
  @@index([status])
}

model Payslip {
  id               String        @id @default(uuid())
  accountId        String
  account          Account       @relation("EmployeePayslips", fields: [accountId], references: [id]) // Renamed relation for clarity
  periodStartDate  DateTime      @db.Date
  periodEndDate    DateTime      @db.Date
  baseSalary       Int
  totalCommissions Int
  totalDeductions  Int           @default(0)
  totalBonuses     Int           @default(0)
  netPay           Int
  status           PayslipStatus @default(PENDING)
  releasedDate     DateTime?
  generatedAt      DateTime      @default(now())

  payslipRequest PayslipRequest? // Optional link back to the originating request

  @@unique([accountId, periodStartDate, periodEndDate])
  @@index([accountId])
  @@index([periodStartDate, periodEndDate])
  @@index([status])
}

model RecommendedAppointment {
  id                       String       @id @default(uuid())
  customerId               String
  customer                 Customer     @relation(fields: [customerId], references: [id])
  recommendedDate          DateTime     @db.Date
  originatingTransactionId String?
  originatingTransaction   Transaction? @relation("OriginatingTransaction", fields: [originatingTransactionId], references: [id])

  originatingAvailedServiceId String         @unique
  originatingAvailedService   AvailedService @relation("RecommendedByAvailedService", fields: [originatingAvailedServiceId], references: [id])

  originatingServiceId String
  originatingService   Service @relation("RecommendedServiceType", fields: [originatingServiceId], references: [id])

  status RecommendedAppointmentStatus @default(RECOMMENDED)

  attendedTransactionId String?      @unique
  attendedTransaction   Transaction? @relation("AttendedTransaction", fields: [attendedTransactionId], references: [id])

  suppressNextFollowUpGeneration Boolean @default(false)

  reminder3DaySentAt      DateTime?
  reminder2DaySentAt      DateTime?
  reminder1DaySentAt      DateTime?
  reminderTodaySentAt     DateTime?
  reminder1DayAfterSentAt DateTime?
  reminder7DaySentAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([recommendedDate])
  @@index([status])
  @@index([attendedTransactionId])
  @@index([originatingServiceId])
  @@index([suppressNextFollowUpGeneration])
}

model DiscountRule {
  id            String       @id @default(uuid())
  description   String?
  discountType  DiscountType
  discountValue Float
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean      @default(true)

  applyToAll Boolean   @default(false)
  services   Service[] @relation("DiscountedServices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive, startDate, endDate])
}

model Branch {
  id          String        @id @default(uuid())
  title       String        @unique
  code        String        @unique @db.VarChar(6)
  totalSales  Int           @default(0) // Consider if this is still needed with aggregation
  services    Service[]
  accounts    Account[]
  // --- NEW RELATIONS ---
  manualSales ManualSale[]
  expenses    Expense[]
  // --- END NEW RELATIONS ---
  Transaction Transaction[]
}

model Attendance {
  id          String   @id @default(uuid())
  date        DateTime @db.Date // Store only the Date part
  accountId   String // The employee whose attendance is recorded
  account     Account  @relation("EmployeeAttendance", fields: [accountId], references: [id])
  isPresent   Boolean  @default(false) // True if attended, False if absent (or null if not yet marked)
  notes       String? // Optional notes (e.g., late, reason for absence)
  checkedById String // Who marked this record
  checkedBy   Account  @relation("CheckerAttendance", fields: [checkedById], references: [id])
  checkedAt   DateTime @default(now()) // When this record was created/updated

  @@unique([date, accountId])
  @@index([date])
}

model Account {
  id                 String           @id @default(uuid())
  username           String           @unique @db.VarChar(20)
  password           String
  name               String
  email              String?          @unique @db.VarChar(255)
  role               Role[]           @default([WORKER])
  salary             Int              @default(0)
  dailyRate          Int              @default(350)
  branchId           String?
  branch             Branch?          @relation(fields: [branchId], references: [id])
  servicesServed     AvailedService[] @relation("ServedRelation")
  servicesChecked    AvailedService[] @relation("CheckedRelation")
  attendances        Attendance[]     @relation("EmployeeAttendance")
  attendancesChecked Attendance[]     @relation("CheckerAttendance")
  canRequestPayslip  Boolean          @default(false)

  payslips Payslip[] @relation("EmployeePayslips")

  payslipRequests        PayslipRequest[] @relation("AccountRequests") // Requests made BY this user
  managedPayslipRequests PayslipRequest[] @relation("AdminManagedRequests") // Requests managed BY this user (if admin)

  // --- NEW RELATIONS ---
  manualSales ManualSale[] @relation("RecordedByAccountManualSales")
  expenses    Expense[]    @relation("RecordedByAccountExpenses")
  // --- END NEW RELATIONS ---

  @@index([branchId])
}

model Service {
  id String @id @default(uuid())

  title            String            @unique
  description      String?
  price            Int               @default(0) // Original price of this single service
  branchId         String
  totalSales       Int               @default(0) // Consider if this is still needed with aggregation
  branch           Branch            @relation(fields: [branchId], references: [id])
  AvailedService   AvailedService[] // <<< Relation FROM AvailedService remains
  serviceSets      ServiceSet[]      @relation("ServiceToSet")
  giftCertificates GiftCertificate[] @relation("GCService")
  discountRules    DiscountRule[]    @relation("DiscountedServices")

  recommendFollowUp       Boolean @default(false)
  recommendedFollowUpDays Int?

  followUpPolicy FollowUpPolicy @default(NONE)

  recommendedAppointments RecommendedAppointment[] @relation("RecommendedServiceType")

  @@index([branchId])
}

model ServiceSet {
  id    String @id @default(uuid())
  title String @unique
  price Int // Total price of the set

  services         Service[]         @relation("ServiceToSet") // Services included in this set
  giftCertificates GiftCertificate[] @relation("GCServiceSet") // GCs that represent this set
  AvailedService   AvailedService[] // Availed items that came from this set
}

model Customer {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(50)
  email           String?   @unique @db.VarChar(255)
  totalPaid       Float     @default(0) // Total value paid (e.g., Pesos)
  nextAppointment DateTime? // Keep this, but logic will update it to the *earliest* RECOMMENDED RecommendedAppointment date

  recommendedAppointments RecommendedAppointment[] // All recommended appointments for this customer

  transactionHistory        Transaction[]
  purchasedGiftCertificates GiftCertificate[] @relation("PurchasedGiftCertificates")
}

model Voucher {
  id          String        @id @default(uuid())
  code        String        @unique
  value       Int
  usedAt      DateTime?
  Transaction Transaction[]
}

model Transaction {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  bookedFor       DateTime         @default(now()) // This is key for 'later' bookings
  customerId      String
  customer        Customer         @relation(fields: [customerId], references: [id])
  availedServices AvailedService[]
  voucherId       String?
  voucherUsed     Voucher?         @relation(fields: [voucherId], references: [id])
  discount        Int              @default(0)
  paymentMethod   PaymentMethod? // Make sure PaymentMethod enum is defined
  grandTotal      Int
  status          Status           @default(PENDING)
  branchId        String? // If you track branch per transaction (might not be needed if tracked per availed service)
  branch          Branch?          @relation(fields: [branchId], references: [id])

  bookingReminderSentAt DateTime? // Timestamp when the 1-hour reminder was sent

  originatingRecommendations RecommendedAppointment[] @relation("OriginatingTransaction")
  attendedAppointment        RecommendedAppointment?  @relation("AttendedTransaction")

  @@index([customerId])
  @@index([createdAt])
  @@index([status, bookedFor, bookingReminderSentAt])
  @@index([branchId]) // Add index if filtering transactions by branch
}

model AvailedService {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  serviceId String? // <<< Now always links to a Service (or null if from a set directly?) - adjust if needed
  service   Service? @relation(fields: [serviceId], references: [id])

  quantity        Int @default(1) // Quantity of THIS specific service (usually 1, even in sets)
  price           Int // Price snapshot for THIS service unit *at time of transaction*.
  commissionValue Int @default(0) // Pre-calculated commission for serving THIS item

  originatingSetId    String? // ID of the ServiceSet this came from, if any
  originatingSetTitle String? // Denormalized title of the set for easier display
  originatingSet      ServiceSet? @relation(fields: [originatingSetId], references: [id]) // Add relation

  checkedById String?
  checkedBy   Account? @relation("CheckedRelation", fields: [checkedById], references: [id])

  servedById   String?
  servedBy     Account? @relation("ServedRelation", fields: [servedById], references: [id])
  serviceSetId String? // This seems redundant with originatingSetId

  status      Status    @default(PENDING)
  completedAt DateTime? // Timestamp when status becomes DONE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  recommendedAppointment RecommendedAppointment? @relation("RecommendedByAvailedService") // The recommendation this service triggered (if any)

  @@index([serviceId])
  @@index([transactionId])
  @@index([checkedById])
  @@index([servedById])
  @@index([originatingSetId])
}

model GiftCertificate {
  id        String    @id @default(uuid())
  code      String    @unique
  issuedAt  DateTime  @default(now())
  expiresAt DateTime? // Optional expiry date

  purchaserCustomerId String?
  purchaserCustomer   Customer? @relation("PurchasedGiftCertificates", fields: [purchaserCustomerId], references: [id])

  recipientName  String?
  recipientEmail String?

  services    Service[]    @relation("GCService")
  serviceSets ServiceSet[] @relation("GCServiceSet") // If applicable

  usedAt DateTime?

  @@index([purchaserCustomerId])
}

// --- NEW MODELS ---

model ManualSale {
  id            String         @id @default(uuid())
  date          DateTime       @db.Date // Date of the manual sale
  amount        Int // Amount in smallest unit (e.g., centavos), using Int for currency
  paymentMethod PaymentMethod? // Use enum or string, allow null/unknown
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  recordedById String // Account who recorded this
  recordedBy   Account @relation("RecordedByAccountManualSales", fields: [recordedById], references: [id])

  branchId String? // Optional: Associate manual sale with a branch
  branch   Branch? @relation(fields: [branchId], references: [id])

  @@index([date])
  @@index([recordedById])
  @@index([branchId])
}

model Expense {
  id          String          @id @default(uuid())
  date        DateTime        @db.Date // Date of the expense
  amount      Int // Amount in smallest unit (e.g., centavos), using Int for currency
  category    ExpenseCategory // Enum for category
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  recordedById String // Account who recorded this
  recordedBy   Account @relation("RecordedByAccountExpenses", fields: [recordedById], references: [id])

  branchId String? // Optional: Associate expense with a branch
  branch   Branch? @relation(fields: [branchId], references: [id])

  @@index([date])
  @@index([category])
  @@index([recordedById])
  @@index([branchId])
}

// --- END NEW MODELS ---
