// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PayslipStatus {
  PENDING
  RELEASED
  // Add other statuses if needed (e.g., FAILED, PROCESSING)
}

model Payslip {
  id              String   @id @default(uuid())
  accountId       String // Employee receiving the payslip
  account         Account  @relation(fields: [accountId], references: [id])
  periodStartDate DateTime @db.Date // Start date of the pay period
  periodEndDate   DateTime @db.Date // End date of the pay period

  baseSalary       Int // Base salary amount for this period (in smallest unit)
  totalCommissions Int // Total commissions earned this period (in smallest unit)
  totalDeductions  Int @default(0) // Total deductions (in smallest unit)
  totalBonuses     Int @default(0) // Total bonuses (in smallest unit)
  netPay           Int // Final calculated amount (in smallest unit)

  status       PayslipStatus @default(PENDING) // Current status
  releasedDate DateTime? // Timestamp when it was marked RELEASED
  generatedAt  DateTime      @default(now()) // When this payslip record was created

  // Optional: Store a reference to the person who released it
  // releasedById    String?
  // releasedBy      Account?      @relation("ReleasedPayslips", fields: [releasedById], references: [id])

  @@unique([accountId, periodStartDate, periodEndDate]) // Ensure only one payslip per employee per period
  @@index([accountId])
  @@index([periodStartDate, periodEndDate])
  @@index([status])
}

enum AvailedItemType {
  SERVICE
  SET
}

// --- Enums ---
enum Role {
  OWNER
  CASHIER
  WORKER
  ATTENDANCE_CHECKER
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum Status {
  PENDING
  DONE
  CANCELLED
}

enum PaymentMethod {
  ewallet
  cash
  bank
}

model DiscountRule {
  id            String       @id @default(uuid())
  description   String?
  discountType  DiscountType
  discountValue Float
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean      @default(true)

  applyToAll Boolean   @default(false) // <<< ADD THIS FLAG
  services   Service[] @relation("DiscountedServices") // Still keep for specific discounts

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive, startDate, endDate])
}

model Branch {
  id         String    @id @default(uuid())
  title      String    @unique
  code       String    @unique @db.VarChar(6)
  totalSales Int       @default(0)
  services   Service[]
  accounts   Account[]
}

model Account {
  id        String  @id @default(uuid())
  username  String  @unique @db.VarChar(20)
  password  String
  name      String
  email     String? @unique @db.VarChar(255)
  role      Role[]  @default([WORKER]) // Add ATTENDANCE_CHECKER where appropriate
  salary    Int     @default(0) // Accumulates commission + daily rate payments
  dailyRate Int     @default(350) // <<< NEW: Daily rate in smallest unit (e.g., centavos)

  branchId String?
  branch   Branch? @relation(fields: [branchId], references: [id])

  servicesServed  AvailedService[] @relation("ServedRelation")
  servicesChecked AvailedService[] @relation("CheckedRelation")

  // Relation to Attendance records
  attendances        Attendance[] @relation("EmployeeAttendance") // <<< NEW RELATION
  attendancesChecked Attendance[] @relation("CheckerAttendance") // <<< NEW RELATION (Who marked the attendance)
  Payslip            Payslip[]

  @@index([branchId]) // Good to have index on branchId
}

model Attendance {
  id          String   @id @default(uuid())
  date        DateTime @db.Date // Store only the Date part
  accountId   String // The employee whose attendance is recorded
  account     Account  @relation("EmployeeAttendance", fields: [accountId], references: [id])
  isPresent   Boolean  @default(false) // True if attended, False if absent (or null if not yet marked)
  notes       String? // Optional notes (e.g., late, reason for absence)
  checkedById String // Who marked this record
  checkedBy   Account  @relation("CheckerAttendance", fields: [checkedById], references: [id])
  checkedAt   DateTime @default(now()) // When this record was created/updated

  @@unique([date, accountId])
  @@index([date]) // Index date for faster querying
}

model Service {
  id String @id @default(uuid())

  title            String            @unique
  description      String?
  price            Int               @default(0) // Original price of this single service
  branchId         String
  totalSales       Int               @default(0)
  branch           Branch            @relation(fields: [branchId], references: [id])
  AvailedService   AvailedService[] // <<< Relation FROM AvailedService remains
  serviceSets      ServiceSet[]      @relation("ServiceToSet")
  giftCertificates GiftCertificate[] @relation("GCService")
  discountRules    DiscountRule[]    @relation("DiscountedServices")

  @@index([branchId])
}

model ServiceSet {
  id    String @id @default(uuid())
  title String @unique
  price Int

  services         Service[]         @relation("ServiceToSet")
  giftCertificates GiftCertificate[] @relation("GCServiceSet")

  // <<< REMOVE relation to AvailedService: availedServices AvailedService[]
}

model Customer {
  id                 String        @id @default(uuid())
  name               String        @db.VarChar(50)
  email              String?       @unique @db.VarChar(255)
  totalPaid          Float         @default(0) // Total value paid (e.g., Pesos)
  nextAppointment    DateTime?
  transactionHistory Transaction[]

  purchasedGiftCertificates GiftCertificate[] @relation("PurchasedGiftCertificates")
}

model Voucher {
  id          String        @id @default(uuid())
  code        String        @unique
  value       Int
  usedAt      DateTime?
  Transaction Transaction[]
}

model Transaction {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  bookedFor       DateTime         @default(now())
  customerId      String
  customer        Customer         @relation(fields: [customerId], references: [id])
  availedServices AvailedService[] // Relation remains the same, links to individual service items
  voucherId       String?
  voucherUsed     Voucher?         @relation(fields: [voucherId], references: [id])
  discount        Int              @default(0) // Total transaction discount
  paymentMethod   PaymentMethod?
  grandTotal      Int // Final transaction total paid
  status          Status           @default(PENDING)
  branchId        String?

  @@index([customerId])
  @@index([createdAt])
}

model AvailedService {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  serviceId String? // <<< Now always links to a Service
  service   Service? @relation(fields: [serviceId], references: [id])

  quantity        Int @default(1) // Quantity of THIS specific service (usually 1, even in sets)
  price           Int // Price snapshot for THIS service unit *at time of transaction*.
  commissionValue Int @default(0) // <<< NEW: Pre-calculated commission for serving THIS item (in smallest unit)

  originatingSetId    String? // <<< NEW: ID of the ServiceSet this came from, if any
  originatingSetTitle String? // <<< NEW: Denormalized title of the set for easier display

  checkedById String?
  checkedBy   Account? @relation("CheckedRelation", fields: [checkedById], references: [id])

  servedById   String?
  servedBy     Account? @relation("ServedRelation", fields: [servedById], references: [id])
  serviceSetId String?

  status      Status    @default(PENDING)
  completedAt DateTime? // <<< ADD THIS: Timestamp when status becomes DONE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([serviceId])
  @@index([transactionId])
  @@index([checkedById])
  @@index([servedById])
  @@index([originatingSetId]) // Index if you query by set origin often
}

model GiftCertificate {
  id        String    @id @default(uuid())
  code      String    @unique // Unique code for redemption
  issuedAt  DateTime  @default(now())
  expiresAt DateTime? // Optional expiry date

  purchaserCustomerId String?
  purchaserCustomer   Customer? @relation("PurchasedGiftCertificates", fields: [purchaserCustomerId], references: [id])

  recipientName  String?
  recipientEmail String?

  services    Service[]    @relation("GCService")
  serviceSets ServiceSet[] @relation("GCServiceSet") // If applicable

  usedAt DateTime? // When it was redeemed

  @@index([purchaserCustomerId])
}
