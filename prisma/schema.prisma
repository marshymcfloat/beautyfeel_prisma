// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Role {
  OWNER
  CASHIER
  WORKER
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum Status {
  PENDING
  DONE
  CANCELLED
}

enum PaymentMethod {
  ewallet
  cash
  bank
}

// --- Models ---

model DiscountRule {
  id            String       @id @default(uuid())
  description   String?
  discountType  DiscountType
  discountValue Float
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean      @default(true)

  // --- Applicability ---
  applyToAll Boolean   @default(false) // <<< ADD THIS FLAG
  services   Service[] @relation("DiscountedServices") // Still keep for specific discounts

  // --- Tracking ---
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive, startDate, endDate])
}

model Branch {
  id         String    @id @default(uuid())
  title      String    @unique
  code       String    @unique @db.VarChar(6)
  totalSales Int       @default(0)
  services   Service[]
  accounts   Account[]
}

model Account {
  id       String  @id @default(uuid())
  username String  @unique @db.VarChar(20) // Increased length if needed
  password String
  name     String
  email    String? @unique @db.VarChar(255)
  role     Role[]  @default([WORKER])
  salary   Int     @default(0)
  branchId String?
  branch   Branch? @relation(fields: [branchId], references: [id])

  servicesServed  AvailedService[] @relation("ServedRelation")
  servicesChecked AvailedService[] @relation("CheckedRelation")
}

model Service {
  id String @id @default(uuid())

  title          String           @unique // Consider if title should be unique globally or per branch
  description    String?
  price          Int              @default(0) // Price per unit in smallest unit (e.g., centavos)
  branchId       String
  totalSales     Int              @default(0) // Total units sold perhaps? Or total value? Clarify meaning or use Float for value.
  branch         Branch           @relation(fields: [branchId], references: [id])
  AvailedService AvailedService[]
  serviceSets    ServiceSet[]     @relation("ServiceToSet")

  // Relation to Gift Certificates (Many-to-Many)
  giftCertificates GiftCertificate[] @relation("GCService")

  discountRules DiscountRule[] @relation("DiscountedServices")
}

model ServiceSet {
  id    String @id @default(uuid())
  title String @unique // Title for the set (e.g., "Spa Day Package")
  price Int // Price for the entire set in smallest unit (e.g., centavos)

  // Many-to-Many relation with Service
  services Service[] @relation("ServiceToSet")

  // Relation to Gift Certificates (Many-to-Many, if GCs can be for sets)
  giftCertificates GiftCertificate[] @relation("GCServiceSet")
}

model Customer {
  id                 String        @id @default(uuid())
  name               String        @db.VarChar(50)
  email              String?       @unique @db.VarChar(255)
  totalPaid          Float         @default(0) // Total value paid (e.g., Pesos)
  nextAppointment    DateTime?
  transactionHistory Transaction[]

  // Relation to purchased GCs
  purchasedGiftCertificates GiftCertificate[] @relation("PurchasedGiftCertificates")
}

model Voucher {
  id          String        @id @default(uuid())
  code        String        @unique
  value       Int // Discount value in smallest unit (e.g., centavos) or percentage? Clarify. Assuming amount for now.
  usedAt      DateTime?
  Transaction Transaction[]
}

model Transaction {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  bookedFor       DateTime         @default(now())
  customerId      String
  customer        Customer         @relation(fields: [customerId], references: [id])
  availedServices AvailedService[]
  voucherId       String?
  voucherUsed     Voucher?         @relation(fields: [voucherId], references: [id])
  discount        Int              @default(0) // Total discount amount in smallest unit (e.g., centavos)
  paymentMethod   PaymentMethod? // e.g., 'cash', 'ewallet', 'bank'
  grandTotal      Int // Final amount paid in smallest unit (e.g., centavos)
  status          Status           @default(PENDING)
  branchId        String? // Link to Branch if transactions are branch-specific

  // Relation to used GCs (A transaction might use one GC)
  giftCertificateUsedId String?          @unique // A GC can only be used once
  giftCertificateUsed   GiftCertificate? @relation("UsedGiftCertificates", fields: [giftCertificateUsedId], references: [id])
}

model AvailedService {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  quantity Int @default(1)

  price Int // Price snapshot per unit in smallest unit (e.g., centavos) at time of transaction

  checkedById String?
  checkedBy   Account? @relation("CheckedRelation", fields: [checkedById], references: [id])

  servedById String?
  servedBy   Account? @relation("ServedRelation", fields: [servedById], references: [id])
}

model GiftCertificate {
  id        String    @id @default(uuid())
  code      String    @unique // Unique code for redemption
  issuedAt  DateTime  @default(now())
  expiresAt DateTime? // Optional expiry date

  // Who bought it (optional)
  purchaserCustomerId String?
  purchaserCustomer   Customer? @relation("PurchasedGiftCertificates", fields: [purchaserCustomerId], references: [id])

  // Who is it for? (Optional details)
  recipientName  String?
  recipientEmail String?

  // What services/sets is it valid for? (Many-to-Many)
  services    Service[]    @relation("GCService")
  serviceSets ServiceSet[] @relation("GCServiceSet") // If applicable

  // Tracking Usage
  usedAt            DateTime? // When it was redeemed
  // Relation field defined by Transaction model (`giftCertificateUsed`)
  usedInTransaction Transaction? @relation("UsedGiftCertificates")

  @@index([purchaserCustomerId])
}
